##==============================================================================
##~For creating a library function in either an existing project or in ShSDK.
##~
##~usage: shcf_cli lib <project_name> <lib_name>
##~  project_name    * existing project must be listed in 'shcf_cli projects'
##~                  * 'shcf' or '-' would mean relative to ShSDK root
##~
##==============================================================================

create_lib() {
    local projname=$1
    local new_lib=$2

    autoload_functions "usage define_rootpath subinit"

    ## anything needed to be run prior to function proper
    subinit

    #show help if no parameters given
    [[ $# -lt 2 ]] && { echo "ERROR: Parameter(s) missing!"; usage lib; exit $FAILED; }

    local shortname_newlib=$($BASENAME_BIN ${new_lib}|$CUT_BIN -d'.' -f1)
    local lib_fullpath=$(define_rootpath $projname)/lib/${new_lib}.bash.inc

    ## make sure not to overwrite existing libraries
    [[ -e $lib_fullpath ]] && {
       echo "ERROR: $lib_fullpath exists. Aborting." 
       return 
    }

$CAT_BIN > $lib_fullpath << EOL
### -------------------------------------------------
### ${shortname_newlib}: auto-generated by shcf_cli
### INPUT:
### OUTPUT:
### AUTHOR:
### GEN TIMESTAMP: `date`
### -------------------------------------------------
$shortname_newlib() {

  ## ----- function parameter
  ##
  local param1=\$1
  local param2=\$2

  ## list of functions to auto-load
  ## of course, edit function names
  ##
  function_to_autoload="
  rename_function1
  rename_function2
  rename_functionX
  "
  autoload_functions "\$function_to_autoload"


  ## ..............................
  ## main function below
  ## ..............................
  :
  :
} ## END: ${shortname_newlib}()
EOL

if [[ -e $lib_fullpath ]]; then
    echo "template lib created in $lib_fullpath"
else
    echo "creation error for $lib_fullpath"
fi

} ## END: create_lib()
